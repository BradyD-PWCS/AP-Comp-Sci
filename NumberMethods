package luups;

public class NumberMethods {
	
	public static boolean isPrime(int n) {
		boolean prime = false;
		int divisorCount = 0;
		for (int i = 2; i<n; i++) {
			if(n%i==0) {
				divisorCount ++;
			}
		}
		if(divisorCount==0) {
			prime=true;
		}
		return prime;
	}
	
	public static int divisorSum(int n) {
		int sum = 0;
		for (int i = 1; i<n; i++) {
			if(n%i==0) {
				sum += i;
			}
		}
		
		return sum;
	}
	
	public static boolean isStrong(int n) {
		boolean strong = false;
		if(!isPrime(n)&&(divisorSum(n)<n)) {
			strong = true;
		}
		return strong;
	}
	
	public static void printDivisors(int n) {
		String Divisors = "";
		for (int i = 1; i<n; i++) {
			if(n%i==0) {
				Divisors += i + " ";
			}
		}
		System.out.println(Divisors);
	}
	
	public static void printPrimes(int n) {
		String PrimeList = "";
		for (int i = 2; i<n; i++) {
			if(isPrime(i)) {
				PrimeList += i + " ";
			}
		}
		System.out.println(PrimeList);
	}
	
	public static void printComposites(int n) {
		String CompositeList = "";
		for (int i = 2; i<n; i++) {
			if(!isPrime(i)) {
				CompositeList += i + " ";
			}
		}
		System.out.println(CompositeList);
	}
	
	
	public static void printStrong(int n) {
		String StrongList = "";
		for (int i = 2; i<n; i++) {
			if(isStrong(i)) {
				StrongList += i + " ";
			}
		}
		System.out.println(StrongList);
	}
	
	public static void printWeak(int n) {
		String WeakList = "";
		for (int i = 2; i<n; i++) {
			if(!isStrong(i) && !isPrime(i)) {
				WeakList += i + " ";
			}
		}
		System.out.println(WeakList);
	}
	
	public static void main(String[] args) {
		printComposites(30);
		printPrimes(30);
		printStrong(30);
		printWeak(30);
	}
}
